AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    Simple implementation of a REST API for an imaginary todo app.

Globals:
  Function:
    Runtime: nodejs8.10
    Handler: index.handler
    Timeout: 60
    Tags:
      stage:
        Ref: StageName

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: The Lambda Function Stage

Resources:

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: todo-app-api-${StageName}
      StageName: dev

  ListTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/list-tasks/
      FunctionName:
        Fn::Sub: todo-app-${StageName}-lists-tasks
      Policies:
        DynamoDBReadPolicy:
          TableName:
            Ref: TasksTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TasksTable
      Events:
        List:
          Type: Api
          Properties:
            Path: /tasks
            Method: GET
            RestApiId:
              Ref: RestApi

  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/create-task/
      FunctionName:
        Fn::Sub: todo-app-${StageName}-create-task
      Policies:
        DynamoDBCrudPolicy:
          TableName:
            Ref: TasksTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TasksTable
      Events:
        Create:
          Type: Api
          Properties:
            Path: /tasks
            Method: POST
            RestApiId:
              Ref: RestApi

  GetTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get-task/
      FunctionName:
        Fn::Sub: todo-app-${StageName}-get-task
      Policies:
        DynamoDBReadPolicy:
          TableName:
            Ref: TasksTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TasksTable
      Events:
        Get:
          Type: Api
          Properties:
            Path: /tasks/{id}
            Method: GET
            RestApiId:
              Ref: RestApi

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/delete-task/
      FunctionName:
        Fn::Sub: todo-app-${StageName}-delete-task
      Policies:
        DynamoDBCrudPolicy:
          TableName:
            Ref: TasksTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TasksTable
      Events:
        Delete:
          Type: Api
          Properties:
            Path: /tasks/{id}
            Method: DELETE
            RestApiId:
              Ref: RestApi

  TasksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: todo-app-${StageName}-tasks
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        stage:
          Ref: StageName

Outputs:
  ApiUrl:
    Value:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: RestApi
          - Fn::Sub: ".execute-api.${AWS::Region}.amazonaws.com/dev"
